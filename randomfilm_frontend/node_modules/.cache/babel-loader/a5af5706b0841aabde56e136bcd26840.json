{"ast":null,"code":"export default class FilmApiService {\n  constructor() {\n    this.BasePath = 'http://localhost:64303';\n    this.Controller = 'Films';\n    this.Id = 'Random';\n\n    this.GetResource = (controller = this.Controller, id = '') => {\n      let result = {};\n      fetch(\"\".concat(this.BasePath, \"/api/\").concat(controller, \"/\").concat(id), {\n        method: 'GET',\n        mode: 'cors'\n      }).then(res => res.json()).then(resultRequest => {\n        result = {\n          id: resultRequest.id,\n          title: resultRequest.title,\n          duaration: resultRequest.duaration,\n          genre: resultRequest.genre,\n          description: resultRequest.description,\n          year: resultRequest.year,\n          director: resultRequest.director,\n          urlImg: resultRequest.urlImg,\n          urlTrailer: resultRequest.urlTrailer\n        };\n        console.log(result);\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        console.log(error);\n      }); //if (!res.ok) {\n      //    throw Error(`Could not fetch ${this.BasePath}` +\n      //        `, received ${res.status}`)\n      //}\n\n      return result;\n    };\n\n    this.GetAllFilms = async () => {\n      return await this.GetResource('Films');\n    };\n\n    this.GetFilmById = async id => {\n      return await this.GetResource('Films', id);\n    };\n\n    this.GetRandomFilm = () => {\n      const result = this.GetResource('Films', 'Random');\n      console.log(result);\n      return result;\n    };\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Anton\\projects\\randomfilm_frontend\\src\\services\\FilmApiService.js"],"names":["FilmApiService","BasePath","Controller","Id","GetResource","controller","id","result","fetch","method","mode","then","res","json","resultRequest","title","duaration","genre","description","year","director","urlImg","urlTrailer","console","log","error","GetAllFilms","GetFilmById","GetRandomFilm"],"mappings":"AAAA,eAAe,MAAMA,cAAN,CAAqB;AAAA;AAAA,SAEhCC,QAFgC,GAErB,wBAFqB;AAAA,SAGhCC,UAHgC,GAGnB,OAHmB;AAAA,SAIhCC,EAJgC,GAI3B,QAJ2B;;AAAA,SAwChCC,WAxCgC,GAwClB,CAACC,UAAU,GAAG,KAAKH,UAAnB,EAA+BI,EAAE,GAAG,EAApC,KAA2C;AACrD,UAAIC,MAAM,GAAG,EAAb;AACAC,MAAAA,KAAK,WAAI,KAAKP,QAAT,kBAAyBI,UAAzB,cAAuCC,EAAvC,GAA6C;AAC9CG,QAAAA,MAAM,EAAE,KADsC;AAE9CC,QAAAA,IAAI,EAAE;AAFwC,OAA7C,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAKWG,aAAD,IAAmB;AACjBP,QAAAA,MAAM,GAAG;AACLD,UAAAA,EAAE,EAAEQ,aAAa,CAACR,EADb;AAELS,UAAAA,KAAK,EAAED,aAAa,CAACC,KAFhB;AAGLC,UAAAA,SAAS,EAAEF,aAAa,CAACE,SAHpB;AAILC,UAAAA,KAAK,EAAEH,aAAa,CAACG,KAJhB;AAKLC,UAAAA,WAAW,EAAEJ,aAAa,CAACI,WALtB;AAMLC,UAAAA,IAAI,EAAEL,aAAa,CAACK,IANf;AAOLC,UAAAA,QAAQ,EAAEN,aAAa,CAACM,QAPnB;AAQLC,UAAAA,MAAM,EAAEP,aAAa,CAACO,MARjB;AASLC,UAAAA,UAAU,EAAER,aAAa,CAACQ;AATrB,SAAT;AAWAC,QAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AACH,OAlBT,EAmBQ;AACA;AACA;AACCkB,MAAAA,KAAD,IAAW;AACPF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH,OAxBT,EAFqD,CA4BrD;AACA;AACA;AACA;;AACA,aAAOlB,MAAP;AACH,KAzE+B;;AAAA,SA2EhCmB,WA3EgC,GA2ElB,YAAY;AACtB,aAAO,MAAM,KAAKtB,WAAL,CAAiB,OAAjB,CAAb;AACH,KA7E+B;;AAAA,SA+EhCuB,WA/EgC,GA+ElB,MAAOrB,EAAP,IAAc;AACxB,aAAO,MAAM,KAAKF,WAAL,CAAiB,OAAjB,EAA0BE,EAA1B,CAAb;AACH,KAjF+B;;AAAA,SAmFhCsB,aAnFgC,GAmFhB,MAAM;AAClB,YAAMrB,MAAM,GAAG,KAAKH,WAAL,CAAiB,OAAjB,EAA0B,QAA1B,CAAf;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AACA,aAAOA,MAAP;AACH,KAvF+B;AAAA;;AAAA","sourcesContent":["export default class FilmApiService {\r\n\r\n    BasePath = 'http://localhost:64303';\r\n    Controller = 'Films';\r\n    Id = 'Random';\r\n\r\n    /*GetRandomFilm = () => {\r\n        let result = {};\r\n        //Работющий запрос\r\n        fetch(\"http://localhost:64303/api/Films/Random\", {\r\n            method: 'GET',\r\n            mode: 'cors'})\r\n\r\n            .then(res => res.json())\r\n            .then((resultRequest) => {\r\n                    //console.log(resultRequest);\r\n                    result = {\r\n                        id: resultRequest.id,\r\n                        title: resultRequest.title,\r\n                        duaration: resultRequest.duaration,\r\n                        genre: resultRequest.genre,\r\n                        description: resultRequest.description,\r\n                        year: resultRequest.year,\r\n                        director: resultRequest.director,\r\n                        urlImg: resultRequest.urlImg,\r\n                        urlTrailer: resultRequest.urlTrailer\r\n                    }\r\n                    //console.log(result);\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            )\r\n        console.log(result);\r\n        return result;\r\n    }*/\r\n\r\n    GetResource = (controller = this.Controller, id = '') => {\r\n        let result = {};\r\n        fetch(`${this.BasePath}/api/${controller}/${id}`, {\r\n            method: 'GET',\r\n            mode: 'cors'})\r\n\r\n            .then(res => res.json())\r\n            .then((resultRequest) => {\r\n                    result = {\r\n                        id: resultRequest.id,\r\n                        title: resultRequest.title,\r\n                        duaration: resultRequest.duaration,\r\n                        genre: resultRequest.genre,\r\n                        description: resultRequest.description,\r\n                        year: resultRequest.year,\r\n                        director: resultRequest.director,\r\n                        urlImg: resultRequest.urlImg,\r\n                        urlTrailer: resultRequest.urlTrailer\r\n                    };\r\n                    console.log(result);\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            );\r\n        //if (!res.ok) {\r\n        //    throw Error(`Could not fetch ${this.BasePath}` +\r\n        //        `, received ${res.status}`)\r\n        //}\r\n        return result;\r\n    };\r\n\r\n    GetAllFilms = async () => {\r\n        return await this.GetResource('Films');\r\n    };\r\n\r\n    GetFilmById = async (id) => {\r\n        return await this.GetResource('Films', id);\r\n    };\r\n\r\n    GetRandomFilm = () => {\r\n        const result = this.GetResource('Films', 'Random');\r\n        console.log(result);\r\n        return result;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}