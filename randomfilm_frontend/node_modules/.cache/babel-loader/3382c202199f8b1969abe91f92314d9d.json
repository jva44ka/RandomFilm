{"ast":null,"code":"export default class FilmApiService {\n  constructor() {\n    this.BasePath = 'http://localhost:64303';\n    this.Controller = 'Films';\n    this.Id = 'Random';\n\n    this.GetRandomFilm = () => {\n      //Работющий запрос\n      fetch(\"http://localhost:64303/api/Films/Random\", {\n        method: 'GET',\n        mode: 'cors'\n      }).then(res => res.json()).then(result => {\n        console.log(result);\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        console.log(error);\n      });\n    };\n  }\n\n  async getResource(controller = this.Controller, id = '') {\n    const res = await fetch(\"\".concat(this.BasePath, \"/api/\").concat(controller, \"/\").concat(id), {\n      method: 'GET',\n      mode: 'cors'\n    }).then(res => res.json()).then(result => {\n      console.log(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      console.log(error);\n    });\n\n    if (!res.ok) {\n      throw new Error(\"Could not fetch \".concat(this.BasePath) + \", received \".concat(res.status));\n    }\n\n    return await res;\n  }\n\n  async getAllFilms() {\n    const res = await this.getResource('Films');\n    return res.results.map(this._transformFilm);\n  }\n\n  async getFilmById(id) {\n    const film = await this.getResource(this.Controller, id);\n    return this._transformFilm(film);\n  }\n\n  async getRandomFilm() {\n    const film = await this.getResource(this.Controller, 'Random');\n    return this._transformFilm(film);\n  }\n\n  _transformFilm(film) {\n    return {\n      id: film.id,\n      title: film.title,\n      duaration: film.duaration,\n      genre: film.genre,\n      description: film.description,\n      year: film.year,\n      director: film.director,\n      urlImg: film.urlImg,\n      urlTrailer: film.urlTrailer\n    };\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Anton\\projects\\randomfilm_frontend\\src\\services\\FilmApiService.js"],"names":["FilmApiService","BasePath","Controller","Id","GetRandomFilm","fetch","method","mode","then","res","json","result","console","log","error","getResource","controller","id","ok","Error","status","getAllFilms","results","map","_transformFilm","getFilmById","film","getRandomFilm","title","duaration","genre","description","year","director","urlImg","urlTrailer"],"mappings":"AAEA,eAAe,MAAMA,cAAN,CAAqB;AAAA;AAAA,SAEhCC,QAFgC,GAErB,wBAFqB;AAAA,SAGhCC,UAHgC,GAGnB,OAHmB;AAAA,SAIhCC,EAJgC,GAI3B,QAJ2B;;AAAA,SAMhCC,aANgC,GAMhB,MAAM;AAClB;AACAC,MAAAA,KAAK,CAAC,yCAAD,EAA4C;AAC7CC,QAAAA,MAAM,EAAE,KADqC;AAE7CC,QAAAA,IAAI,EAAE;AAFuC,OAA5C,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAKWG,MAAD,IAAY;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,OAPT,EAQQ;AACA;AACA;AACCG,MAAAA,KAAD,IAAW;AACPF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH,OAbT;AAeH,KAvB+B;AAAA;;AAyBhC,QAAMC,WAAN,CAAkBC,UAAU,GAAG,KAAKd,UAApC,EAAgDe,EAAE,GAAG,EAArD,EAAyD;AACrD,UAAMR,GAAG,GAAG,MAAMJ,KAAK,WAAI,KAAKJ,QAAT,kBAAyBe,UAAzB,cAAuCC,EAAvC,GAA6C;AAChEX,MAAAA,MAAM,EAAE,KADwD;AAEhEC,MAAAA,IAAI,EAAE;AAF0D,KAA7C,CAAL,CAIbC,IAJa,CAIRC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJC,EAKbF,IALa,CAKPG,MAAD,IAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,KAPS,EAQV;AACA;AACA;AACCG,IAAAA,KAAD,IAAW;AACPF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH,KAbS,CAAlB;;AAgBA,QAAI,CAACL,GAAG,CAACS,EAAT,EAAa;AACT,YAAM,IAAIC,KAAJ,CAAU,0BAAmB,KAAKlB,QAAxB,yBACEQ,GAAG,CAACW,MADN,CAAV,CAAN;AAEH;;AACD,WAAO,MAAMX,GAAb;AACH;;AAED,QAAMY,WAAN,GAAoB;AAChB,UAAMZ,GAAG,GAAG,MAAM,KAAKM,WAAL,CAAiB,OAAjB,CAAlB;AACA,WAAON,GAAG,CAACa,OAAJ,CAAYC,GAAZ,CAAgB,KAAKC,cAArB,CAAP;AACH;;AAED,QAAMC,WAAN,CAAkBR,EAAlB,EAAsB;AAClB,UAAMS,IAAI,GAAG,MAAM,KAAKX,WAAL,CAAiB,KAAKb,UAAtB,EAAkCe,EAAlC,CAAnB;AACA,WAAO,KAAKO,cAAL,CAAoBE,IAApB,CAAP;AACH;;AAED,QAAMC,aAAN,GAAsB;AAClB,UAAMD,IAAI,GAAG,MAAM,KAAKX,WAAL,CAAiB,KAAKb,UAAtB,EAAkC,QAAlC,CAAnB;AAEA,WAAO,KAAKsB,cAAL,CAAoBE,IAApB,CAAP;AACH;;AAEDF,EAAAA,cAAc,CAACE,IAAD,EAAO;AACjB,WAAO;AACCT,MAAAA,EAAE,EAAES,IAAI,CAACT,EADV;AAECW,MAAAA,KAAK,EAAEF,IAAI,CAACE,KAFb;AAGCC,MAAAA,SAAS,EAAEH,IAAI,CAACG,SAHjB;AAICC,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KAJb;AAKCC,MAAAA,WAAW,EAAEL,IAAI,CAACK,WALnB;AAMCC,MAAAA,IAAI,EAAEN,IAAI,CAACM,IANZ;AAOCC,MAAAA,QAAQ,EAAEP,IAAI,CAACO,QAPhB;AAQCC,MAAAA,MAAM,EAAER,IAAI,CAACQ,MARd;AASCC,MAAAA,UAAU,EAAET,IAAI,CAACS;AATlB,KAAP;AAWH;;AA7E+B","sourcesContent":["\r\n\r\nexport default class FilmApiService {\r\n\r\n    BasePath = 'http://localhost:64303';\r\n    Controller = 'Films'\r\n    Id = 'Random';\r\n\r\n    GetRandomFilm = () => {\r\n        //Работющий запрос\r\n        fetch(\"http://localhost:64303/api/Films/Random\", {\r\n            method: 'GET',\r\n            mode: 'cors'})\r\n\r\n            .then(res => res.json())\r\n            .then((result) => {\r\n                    console.log(result);\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    async getResource(controller = this.Controller, id = '') {\r\n        const res = await fetch(`${this.BasePath}/api/${controller}/${id}`, {\r\n            method: 'GET',\r\n            mode: 'cors'})\r\n\r\n            .then(res => res.json())\r\n            .then((result) => {\r\n                    console.log(result);\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            )\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${this.BasePath}` +\r\n                `, received ${res.status}`)\r\n        }\r\n        return await res;\r\n    }\r\n\r\n    async getAllFilms() {\r\n        const res = await this.getResource('Films');\r\n        return res.results.map(this._transformFilm);\r\n    }\r\n\r\n    async getFilmById(id) {\r\n        const film = await this.getResource(this.Controller, id);\r\n        return this._transformFilm(film);\r\n    }\r\n\r\n    async getRandomFilm() {\r\n        const film = await this.getResource(this.Controller, 'Random');\r\n\r\n        return this._transformFilm(film);\r\n    }\r\n\r\n    _transformFilm(film) {\r\n        return {\r\n                id: film.id,\r\n                title: film.title,\r\n                duaration: film.duaration,\r\n                genre: film.genre,\r\n                description: film.description,\r\n                year: film.year,\r\n                director: film.director,\r\n                urlImg: film.urlImg,\r\n                urlTrailer: film.urlTrailer\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}