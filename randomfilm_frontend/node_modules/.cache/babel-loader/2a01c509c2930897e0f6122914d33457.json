{"ast":null,"code":"export default class FilmApiService {\n  constructor() {\n    this.BasePath = 'http://localhost:64303';\n    this.Controller = 'Films';\n    this.Id = 'Random';\n\n    this.GetRandomFilm = () => {\n      let result = {\n        id: null\n      }; //Работющий запрос\n\n      fetch(\"http://localhost:64303/api/Films/Random\", {\n        method: 'GET',\n        mode: 'cors'\n      }).then(res => res.json()).then(resultRequest => {\n        console.log(resultRequest);\n        result = {\n          id: resultRequest.id,\n          title: resultRequest.title,\n          duaration: resultRequest.duaration,\n          genre: resultRequest.genre,\n          description: resultRequest.description,\n          year: resultRequest.year,\n          director: resultRequest.director,\n          urlImg: resultRequest.urlImg,\n          urlTrailer: resultRequest.urlTrailer\n        };\n        console.log(result);\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        console.log(error);\n      });\n      console.log(result);\n      return result;\n    };\n\n    this.getResource = async (controller = this.Controller, id = '') => {\n      let res = await fetch(\"\".concat(this.BasePath, \"/api/\").concat(controller, \"/\").concat(id), {\n        method: 'GET',\n        mode: 'cors'\n      }).then(res => res.json()).then(result => {\n        console.log(result);\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        console.log(error);\n      }); //if (!res.ok) {\n      //    throw Error(`Could not fetch ${this.BasePath}` +\n      //        `, received ${res.status}`)\n      //}\n\n      return await res;\n    };\n  }\n\n  async getAllFilms() {\n    const res = await this.getResource('Films');\n    return res.results.map(this._transformFilm);\n  }\n\n  async getFilmById(id) {\n    const film = await this.getResource(this.Controller, id);\n    return this._transformFilm(film);\n  }\n\n  async getRandomFilm() {\n    const film = await this.getResource(this.Controller, 'Random');\n    return film; //this._transformFilm(film);\n  }\n\n  _transformFilm(film) {\n    return {\n      id: film.id,\n      title: film.title,\n      duaration: film.duaration,\n      genre: film.genre,\n      description: film.description,\n      year: film.year,\n      director: film.director,\n      urlImg: film.urlImg,\n      urlTrailer: film.urlTrailer\n    };\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Anton\\projects\\randomfilm_frontend\\src\\services\\FilmApiService.js"],"names":["FilmApiService","BasePath","Controller","Id","GetRandomFilm","result","id","fetch","method","mode","then","res","json","resultRequest","console","log","title","duaration","genre","description","year","director","urlImg","urlTrailer","error","getResource","controller","getAllFilms","results","map","_transformFilm","getFilmById","film","getRandomFilm"],"mappings":"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","sourcesContent":["export default class FilmApiService {\r\n\r\n    BasePath = 'http://localhost:64303';\r\n    Controller = 'Films'\r\n    Id = 'Random';\r\n\r\n    GetRandomFilm = () => {\r\n        let result = {\r\n            id: null\r\n        };\r\n        //Работющий запрос\r\n        fetch(\"http://localhost:64303/api/Films/Random\", {\r\n            method: 'GET',\r\n            mode: 'cors'})\r\n\r\n            .then(res => res.json())\r\n            .then((resultRequest) => {\r\n                    console.log(resultRequest);\r\n                    result = {\r\n                        id: resultRequest.id,\r\n                        title: resultRequest.title,\r\n                        duaration: resultRequest.duaration,\r\n                        genre: resultRequest.genre,\r\n                        description: resultRequest.description,\r\n                        year: resultRequest.year,\r\n                        director: resultRequest.director,\r\n                        urlImg: resultRequest.urlImg,\r\n                        urlTrailer: resultRequest.urlTrailer\r\n                    }\r\n                    console.log(result);\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            )\r\n        console.log(result);\r\n        return result;\r\n    }\r\n\r\n    getResource = async(controller = this.Controller, id = '') => {\r\n        let res = await fetch(`${this.BasePath}/api/${controller}/${id}`, {\r\n            method: 'GET',\r\n            mode: 'cors'})\r\n\r\n            .then(res => res.json())\r\n            .then((result) => {\r\n                    console.log(result);\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            )\r\n\r\n        //if (!res.ok) {\r\n        //    throw Error(`Could not fetch ${this.BasePath}` +\r\n        //        `, received ${res.status}`)\r\n        //}\r\n        return await res;\r\n    }\r\n\r\n    async getAllFilms() {\r\n        const res = await this.getResource('Films');\r\n        return res.results.map(this._transformFilm);\r\n    }\r\n\r\n    async getFilmById(id) {\r\n        const film = await this.getResource(this.Controller, id);\r\n        return this._transformFilm(film);\r\n    }\r\n\r\n    async getRandomFilm() {\r\n        const film = await this.getResource(this.Controller, 'Random');\r\n\r\n        return film;//this._transformFilm(film);\r\n    }\r\n\r\n    _transformFilm(film) {\r\n        return {\r\n                id: film.id,\r\n                title: film.title,\r\n                duaration: film.duaration,\r\n                genre: film.genre,\r\n                description: film.description,\r\n                year: film.year,\r\n                director: film.director,\r\n                urlImg: film.urlImg,\r\n                urlTrailer: film.urlTrailer\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}